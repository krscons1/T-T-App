#!/usr/bin/env python3
"""
Test script for fixed Sarvam text distribution
"""

import sys
import os

# Add the app directory to the Python path
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

def test_sarvam_distribution():
    """Test the Sarvam text distribution logic"""
    print("ЁЯзк Testing Sarvam text distribution...")
    
    try:
        from app.services.enhanced_transcription_service import EnhancedTranscriptionService
        
        service = EnhancedTranscriptionService()
        
        # Test case 1: Sarvam text with newlines
        elevenlabs_segments = [
            {
                "speaker": "speaker_0",
                "text": "Let me sing a story",
                "start_time": 0.0,
                "end_time": 10.0
            },
            {
                "speaker": "speaker_1", 
                "text": "Pay attention",
                "start_time": 10.0,
                "end_time": 20.0
            },
            {
                "speaker": "speaker_0",
                "text": "Listen to me",
                "start_time": 20.0,
                "end_time": 30.0
            }
        ]
        
        sarvam_text = """роХрпБро┤роирпНродрпИ Let me sing a story.
роХро╡ройроорпН Pay attention.
роХрпЗро│рпНро╡ро┐ Listen to me."""
        
        print(f"\nЁЯУЭ Test 1: Sarvam text with newlines")
        print(f"ElevenLabs segments: {len(elevenlabs_segments)}")
        print(f"Sarvam text: '{sarvam_text}'")
        
        result = service._distribute_sarvam_text(elevenlabs_segments, sarvam_text)
        
        print(f"ЁЯФН Distribution result:")
        for i, segment in enumerate(result):
            print(f"  Segment {i}: {segment['speaker']} - '{segment['text'][:50]}...'")
        
        # Test case 2: Sarvam text with sentences
        sarvam_text = "роХрпБро┤роирпНродрпИ Let me sing a story. роХро╡ройроорпН Pay attention. роХрпЗро│рпНро╡ро┐ Listen to me."
        
        print(f"\nЁЯУЭ Test 2: Sarvam text with sentences")
        print(f"Sarvam text: '{sarvam_text}'")
        
        result = service._distribute_sarvam_text(elevenlabs_segments, sarvam_text)
        
        print(f"ЁЯФН Distribution result:")
        for i, segment in enumerate(result):
            print(f"  Segment {i}: {segment['speaker']} - '{segment['text'][:50]}...'")
        
        # Test case 3: Long Sarvam text
        sarvam_text = "роороХрпНроХро│ро╛ро▓рпН роЪрпЗро░рпНроирпНродрокрпНрокроЯрпНроЯ роЕро░роЪрпБроХрпНроХрпБ роЕродро┐роХро╛ро░роорпН роЗро▓рпНро▓. роЗроЩрпНроХ роЕродро┐роХро╛ро░рокрпНрокроЯро┐родро╛ройрпН роироЯроХрпНроХрпБродрпБ. роЕродро┐роХро╛ро░ роЪрогрпНроЯрпИропрпБроорпН рокродро╡ро┐ роиро▓ройрпБроХрпНроХро╛роХро╡рпБроорпН рокрпЛроЯрпНроЯро┐ рокрпЛроЯрпНроЯрпБроХрпНроХрпКрогрпНроЯрпБ роЗройрпНро▒рпБ роЕро░роЪрпБ роЪрпЖропрпНропрпБроорпН роиро┐ро▓рпИроорпИродро╛ройрпН роЗроирпНрод рокрпБро▓ро┐роЪрпНроЪро░рпНро▓ роЗро░рпБроХрпНроХрпБродрпБ."
        
        print(f"\nЁЯУЭ Test 3: Long Sarvam text")
        print(f"Sarvam text: '{sarvam_text[:50]}...'")
        
        result = service._distribute_sarvam_text(elevenlabs_segments, sarvam_text)
        
        print(f"ЁЯФН Distribution result:")
        for i, segment in enumerate(result):
            print(f"  Segment {i}: {segment['speaker']} - '{segment['text'][:50]}...'")
        
    except Exception as e:
        print(f"тЭМ Test failed: {e}")

def test_text_splitting():
    """Test the text splitting logic"""
    print("\nЁЯзк Testing text splitting logic...")
    
    try:
        from app.services.enhanced_transcription_service import EnhancedTranscriptionService
        
        service = EnhancedTranscriptionService()
        
        # Test case 1: Text with newlines
        text = """роХрпБро┤роирпНродрпИ Let me sing a story.
роХро╡ройроорпН Pay attention.
роХрпЗро│рпНро╡ро┐ Listen to me."""
        
        print(f"\nЁЯУЭ Test 1: Text with newlines")
        print(f"Input: '{text}'")
        result = service._split_sarvam_text(text)
        print(f"Split into {len(result)} parts:")
        for i, part in enumerate(result):
            print(f"  Part {i}: '{part}'")
        
        # Test case 2: Text with sentences
        text = "роХрпБро┤роирпНродрпИ Let me sing a story. роХро╡ройроорпН Pay attention. роХрпЗро│рпНро╡ро┐ Listen to me."
        
        print(f"\nЁЯУЭ Test 2: Text with sentences")
        print(f"Input: '{text}'")
        result = service._split_sarvam_text(text)
        print(f"Split into {len(result)} parts:")
        for i, part in enumerate(result):
            print(f"  Part {i}: '{part}'")
        
        # Test case 3: Long text without clear breaks
        text = "роороХрпНроХро│ро╛ро▓рпН роЪрпЗро░рпНроирпНродрокрпНрокроЯрпНроЯ роЕро░роЪрпБроХрпНроХрпБ роЕродро┐роХро╛ро░роорпН роЗро▓рпНро▓ роЗроЩрпНроХ роЕродро┐роХро╛ро░рокрпНрокроЯро┐родро╛ройрпН роироЯроХрпНроХрпБродрпБ роЕродро┐роХро╛ро░ роЪрогрпНроЯрпИропрпБроорпН рокродро╡ро┐ роиро▓ройрпБроХрпНроХро╛роХро╡рпБроорпН рокрпЛроЯрпНроЯро┐ рокрпЛроЯрпНроЯрпБроХрпНроХрпКрогрпНроЯрпБ роЗройрпНро▒рпБ роЕро░роЪрпБ роЪрпЖропрпНропрпБроорпН роиро┐ро▓рпИроорпИродро╛ройрпН роЗроирпНрод рокрпБро▓ро┐роЪрпНроЪро░рпНро▓ роЗро░рпБроХрпНроХрпБродрпБ"
        
        print(f"\nЁЯУЭ Test 3: Long text without clear breaks")
        print(f"Input: '{text[:50]}...'")
        result = service._split_sarvam_text(text)
        print(f"Split into {len(result)} parts:")
        for i, part in enumerate(result):
            print(f"  Part {i}: '{part[:50]}...'")
        
    except Exception as e:
        print(f"тЭМ Text splitting test failed: {e}")

if __name__ == "__main__":
    print("ЁЯЪА Starting Sarvam distribution tests...")
    
    test_text_splitting()
    test_sarvam_distribution()
    
    print("\nтЬЕ All tests completed!")
    print("\nЁЯУЛ Summary of fixes:")
    print("1. Fixed Sarvam text distribution across segments")
    print("2. Added intelligent text splitting by newlines, sentences, or chunks")
    print("3. Prevents same text from being repeated across all segments")
    print("4. Maintains speaker information from ElevenLabs")
    print("5. Provides fallback to original ElevenLabs text if needed") 